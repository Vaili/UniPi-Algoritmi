#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 
void LCS(const char *X, const char *Y);
void LCS_Print_C(const int  **C, int dim_n, int dim_m, const char *X, const char *Y);
void LCS_Print_B(const char **B, int dim_m, int dim_n, const char *X, const char *Y);
void LCS_Print(const char **B, const char *X, int m, int n);
 
int main(int argc, char **argv) {
     
    if (argc != 3) {
        printf("ERROR:  LCS Funziona solo con 2 stringhe. \n");
        printf("    Stringhe inserite: %d", argc - 1);
        return 0;
    }
     
    LCS(argv[1], argv[2]);
     
    return 0;
}
 
void LCS(const char *X, const char *Y) {
    int i, j;
    int m = strlen(X);
    int n = strlen(Y);
    int  **C;
    char **B;
     
    printf("X = %s\tX.length = %d\n", X, m);
    printf("Y = %s\tY.length = %d\n", Y, n);
     
    //Crea tabella C
    C = malloc((m + 1) * sizeof(int*));
    for (i = 0; i <= m; i++) {
        C[i] = malloc((n + 1) * sizeof(int));
    }
    B = malloc(m * sizeof(char*));
    for (i = 0; i < m; i++) {
        B[i] = malloc(n * sizeof(char));
    }
     
    for (i = 0; i <= m; i++) C[i][0] = 0;
    for (i = 0; i <= n; i++) C[0][i] = 0;
     
    for (i = 1; i <= m; i++) {
        for (j = 1; j <= n; j++) {
            if (X[i-1] == Y[j-1]) {
                C[i][j] = C[i-1][j-1] + 1;
                B[i-1][j-1] = '\\';
            } else {
                if (C[i-1][j] > C[i][j-1]) {
                    C[i][j] = C[i-1][j];
                    B[i-1][j-1] = '-';
                } else {
                    C[i][j] = C[i][j-1];
                    B[i-1][j-1] = '|';
                }
            }
        }
    }
    LCS_Print_C(C, m, n, X, Y);
    printf("\n");
    LCS_Print_B(B, m, n, X, Y);
    printf("\n");
    LCS_Print(B, X, m, n);
}
 
void LCS_Print_C(const int **C, int dim_n, int dim_m, const char *X, const char *Y) {
    int i, j;
    printf("\n");
    printf("    ");
    for (i = 0; i < dim_n; i++) printf("%c ", X[i]);
    printf("\n");
    for (i = 0; i <= dim_m; i++) {
        if(i > 0) printf("%c ", Y[i-1]);
        else printf("  ");
        for (j = 0; j <= dim_n; j++) {
             
            printf("%d ", C[j][i]);
        }
        printf("\n");
    }
}
 
void LCS_Print_B(const char **B, int dim_n, int dim_m, const char *X, const char *Y) {
    int i, j;
    printf("\n");
    printf("  ");
    for (i = 0; i < dim_n; i++) printf("%c ", X[i]);
    printf("\n");
    for (i = 0; i < dim_m; i++) {
        printf("%c ", Y[i]);
        for (j = 0; j < dim_n; j++) {
            printf("%c ", B[j][i]);
        }
        printf("\n");
    }
}
 
void LCS_Print(const char **B, const char *X, int m, int n) {
    if (m == 0 || n == 0) return;
    if (B[m-1][n-1] == '\\') {
        LCS_Print(B, X, m-1, n-1);
        printf("%c", X[m-1]);
    } else {
        if (B[m-1][n-1] == '-') LCS_Print(B, X, m-1, n);
        else LCS_Print(B, X, m, n-1);
    }
}
